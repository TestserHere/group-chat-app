{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","ChatApp","roomCode","setRoomCode","useState","customRoomCode","setCustomRoomCode","message","setMessage","messages","setMessages","rooms","setRooms","username","setUsername","localStorage","getItem","usernameSet","setUsernameSet","useEffect","async","snapshot","getDocs","collection","docs","map","doc","id","fetchRooms","q","query","orderBy","unsubscribe","onSnapshot","data","React","createElement","className","style","maxHeight","overflowY","msg","index","key","user","text","placeholder","value","onChange","e","target","onClick","trim","setDoc","Date","getTime","toString","timestamp","room","joinRoom","setUser","setItem","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.b5cd6208.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, setDoc, onSnapshot, query, orderBy, getDocs, doc } from \"firebase/firestore\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAThnPos7CBAUo9KU00soMwOgx0vFXVmL8\",\n  authDomain: \"groupchatapp-12918.firebaseapp.com\",\n  projectId: \"groupchatapp-12918\",\n  storageBucket: \"groupchatapp-12918.firebasestorage.app\",\n  messagingSenderId: \"312169425350\",\n  appId: \"1:312169425350:web:26dca269b31fbb407baac7\",\n  measurementId: \"G-7XDHBHSCZD\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport default function ChatApp() {\n  const [roomCode, setRoomCode] = useState(\"\");\n  const [customRoomCode, setCustomRoomCode] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [rooms, setRooms] = useState([]);\n  const [username, setUsername] = useState(localStorage.getItem(\"username\") || \"\");\n  const [usernameSet, setUsernameSet] = useState(!!username);\n\n  useEffect(() => {\n    const fetchRooms = async () => {\n      const snapshot = await getDocs(collection(db, \"chatrooms\"));\n      setRooms(snapshot.docs.map(doc => doc.id));\n    };\n    fetchRooms();\n  }, []);\n\n  useEffect(() => {\n    if (roomCode) {\n      const q = query(collection(db, roomCode), orderBy(\"timestamp\", \"asc\"));\n      const unsubscribe = onSnapshot(q, (snapshot) => {\n        setMessages(snapshot.docs.map(doc => doc.data()));\n      });\n      return () => unsubscribe();\n    }\n  }, [roomCode]);\n\n  const createRoom = async () => {\n    if (!customRoomCode.trim()) return;\n    await setDoc(doc(db, \"chatrooms\", customRoomCode), { id: customRoomCode });\n    setRoomCode(customRoomCode);\n  };\n\n  const joinRoom = (room) => {\n    setRoomCode(room);\n  };\n\n  const sendMessage = async () => {\n    if (roomCode && message.trim()) {\n      await setDoc(doc(db, roomCode, new Date().getTime().toString()), { text: message, timestamp: new Date().getTime(), user: username });\n      setMessage(\"\");\n    }\n  };\n\n  const setUser = () => {\n    if (username.trim()) {\n      localStorage.setItem(\"username\", username);\n      setUsernameSet(true);\n    }\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h1 className=\"text-center mb-4\">Group Chat</h1>\n      {!usernameSet ? (\n        <div className=\"card p-4 shadow-sm\">\n          <input \n            className=\"form-control mb-2\" \n            placeholder=\"Enter a username\" \n            value={username} \n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <button onClick={setUser} className=\"btn btn-primary w-100\">Set Username</button>\n        </div>\n      ) : !roomCode ? (\n        <div className=\"card p-4 shadow-sm\">\n          <input \n            className=\"form-control mb-2\" \n            placeholder=\"Enter Custom Room Code\" \n            value={customRoomCode} \n            onChange={(e) => setCustomRoomCode(e.target.value)}\n          />\n          <button onClick={createRoom} className=\"btn btn-primary w-100\">Create Chat Room</button>\n          <h2 className=\"mt-4\">Join an Existing Room</h2>\n          <ul className=\"list-group\">\n            {rooms.map((room) => (\n              <li key={room} className=\"list-group-item d-flex justify-content-between\">\n                <span>{room}</span>\n                <button onClick={() => joinRoom(room)} className=\"btn btn-secondary\">Join</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"card p-4 shadow-sm\">\n          <p className=\"text-center\">Room Code: <span className=\"badge bg-secondary\">{roomCode}</span></p>\n          <div className=\"messages-box border p-3 mb-3\" style={{ maxHeight: \"300px\", overflowY: \"auto\" }}>\n            {messages.map((msg, index) => (\n              <div \n                key={index} \n                className={`d-flex ${msg.user === username ? 'justify-content-start' : 'justify-content-end'}`}>\n                <div className={`alert ${msg.user === username ? 'alert-primary' : 'alert-secondary'} text-wrap`}> \n                  <strong>{msg.user}: </strong> {msg.text}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"input-group\">\n            <input \n              className=\"form-control\" \n              placeholder=\"Type a message\" \n              value={message} \n              onChange={(e) => setMessage(e.target.value)}\n            />\n            <button onClick={sendMessage} className=\"btn btn-success\">Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}