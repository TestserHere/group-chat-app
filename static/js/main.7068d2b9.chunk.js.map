{"version":3,"sources":["components/ui/button.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","_ref","children","onClick","React","createElement","style","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","ChatApp","roomCode","setRoomCode","useState","message","setMessage","messages","setMessages","useEffect","unsubscribe","onSnapshot","collection","snapshot","docs","map","doc","data","className","placeholder","value","onChange","e","target","async","trim","addDoc","text","timestamp","Date","now","msg","index","key","createRoom","newRoomCode","uuidv4","split","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"6NAEO,SAASA,EAAMC,GAAwB,IAAvBC,SAAEA,EAAQC,QAAEA,GAASF,EAC1C,OACEG,IAAAC,cAAA,UACEF,QAASA,EACTG,MAAO,CACLC,QAAS,YACTC,SAAU,OACVC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,OACRC,aAAc,MACdC,OAAQ,YAGTX,GCRP,MAUMY,EAAMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,yCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIXC,EAAKC,YAAaV,GAET,SAASW,IACtB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAASC,GAAcF,mBAAS,KAChCG,EAAUC,GAAeJ,mBAAS,IAEzCK,oBAAU,KACR,GAAIP,EAAU,CACZ,MAAMQ,EAAcC,YAAWC,YAAWb,EAAIG,GAAYW,IACxDL,EAAYK,EAASC,KAAKC,IAAIC,GAAOA,EAAIC,WAE3C,MAAO,IAAMP,MAEd,CAACR,IAcJ,OACEtB,IAAAC,cAAA,OAAKqC,UAAU,kCACbtC,IAAAC,cAAA,MAAIqC,UAAU,qBAAoB,eAChChB,EAGAtB,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,cAAWD,IAAAC,cAAA,QAAMqC,UAAU,6BAA6BhB,IAC3DtB,IAAAC,cAAA,SACEqC,UAAU,4BACVC,YAAY,iBACZC,MAAOf,EACPgB,SAAWC,GAAMhB,EAAWgB,EAAEC,OAAOH,SAEvCxC,IAAAC,cAACL,EAAM,CAACG,QArBI6C,UACdtB,GAAYG,EAAQoB,eAChBC,YAAOd,YAAWb,EAAIG,GAAW,CAAEyB,KAAMtB,EAASuB,UAAWC,KAAKC,QACxExB,EAAW,MAkBuBY,UAAU,QAAO,QAC/CtC,IAAAC,cAAA,OAAKqC,UAAU,kBACZX,EAASQ,IAAI,CAACgB,EAAKC,IAClBpD,IAAAC,cAAA,KAAGoD,IAAKD,EAAOd,UAAU,2BAA2Ba,EAAIJ,SAb9D/C,IAAAC,cAACL,EAAM,CAACG,QAhBKuD,KACjB,MAAMC,EAAcC,cAASC,MAAM,KAAK,GACxClC,EAAYgC,KAcqB,qBCvCtBG,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAnB,EAAA,GAAAoB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKjE,IAAiD,IAAhDmE,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASvE,EACpEmE,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzE,IAAAC,cAACD,IAAM0E,WAAU,KACf1E,IAAAC,cAAC0E,EAAG,QAORjB","file":"static/js/main.7068d2b9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport function Button({ children, onClick }) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      style={{\r\n        padding: \"10px 20px\",\r\n        fontSize: \"16px\",\r\n        backgroundColor: \"#007bff\",\r\n        color: \"white\",\r\n        border: \"none\",\r\n        borderRadius: \"5px\",\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Button } from \"./components/ui/button\";\n\n// Firebase config (replace with your own)\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAThnPos7CBAUo9KU00soMwOgx0vFXVmL8\",\n  authDomain: \"groupchatapp-12918.firebaseapp.com\",\n  projectId: \"groupchatapp-12918\",\n  storageBucket: \"groupchatapp-12918.firebasestorage.app\",\n  messagingSenderId: \"312169425350\",\n  appId: \"1:312169425350:web:26dca269b31fbb407baac7\",\n  measurementId: \"G-7XDHBHSCZD\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport default function ChatApp() {\n  const [roomCode, setRoomCode] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (roomCode) {\n      const unsubscribe = onSnapshot(collection(db, roomCode), (snapshot) => {\n        setMessages(snapshot.docs.map(doc => doc.data()));\n      });\n      return () => unsubscribe();\n    }\n  }, [roomCode]);\n\n  const createRoom = () => {\n    const newRoomCode = uuidv4().split(\"-\")[0];\n    setRoomCode(newRoomCode);\n  };\n\n  const sendMessage = async () => {\n    if (roomCode && message.trim()) {\n      await addDoc(collection(db, roomCode), { text: message, timestamp: Date.now() });\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-md mx-auto space-y-4\">\n      <h1 className=\"text-xl font-bold\">Group Chat!</h1>\n      {!roomCode ? (\n        <Button onClick={createRoom}>Create Chat Room</Button>\n      ) : (\n        <div>\n          <p>Room Code: <span className=\"font-mono bg-gray-200 p-1\">{roomCode}</span></p>\n          <input \n            className=\"w-full p-2 border rounded\" \n            placeholder=\"Type a message\" \n            value={message} \n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <Button onClick={sendMessage} className=\"mt-2\">Send</Button>\n          <div className=\"mt-4 space-y-2\">\n            {messages.map((msg, index) => (\n              <p key={index} className=\"p-2 bg-gray-100 rounded\">{msg.text}</p>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}